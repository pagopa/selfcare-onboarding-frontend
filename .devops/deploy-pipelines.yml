# Azure DevOps pipeline to release a new version and deploy to production.

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor

variables:
  NODE_VERSION: '16.10.0'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
  # Execute agents (jobs) on latest Ubuntu version.
  vmImageNameDefault: 'ubuntu-latest'

  basePath: onboarding

  ${{ if or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release-uat'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix')) }}:
    environment: 'UAT'
    azure_subscription: $(UAT_AZURE_SUBSCRIPTION)
    cdn_endpoint: '$(UAT_CDN_ENDPOINT)'
    cdn_profile: '$(UAT_CDN_PROFILE)'
    resource_group: '$(UAT_RESOURCE_GROUP)'
    storage_account: '$(UAT_STORAGE_ACCOUNT)'

    react_app_url_fe_login: '$(UAT_REACT_APP_URL_FE_LOGIN)/login'
    react_app_url_fe_logout: '$(UAT_REACT_APP_URL_FE_LOGIN)/logout'
    react_app_url_fe_dashboard: '$(UAT_REACT_APP_URL_FE_DASHBOARD)'
    react_app_url_fe_landing: '$(UAT_REACT_APP_URL_FE_LANDING)'
    react_app_url_api_onboarding: '$(UAT_REACT_APP_URL_API_ONBOARDING)'
    react_app_url_api_party_process: '$(UAT_REACT_APP_URL_API_PARTY_PROCESS)'
    react_app_url_api_party_registry_proxy: '$(UAT_REACT_APP_URL_API_PARTY_REGISTRY_PROXY)'
    react_app_enable_assistance: 'true'

  ${{ elseif eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    environment: 'PROD'
    azure_subscription: $(PROD_AZURE_SUBSCRIPTION)
    cdn_endpoint: '$(PROD_CDN_ENDPOINT)'
    cdn_profile: '$(PROD_CDN_PROFILE)'
    resource_group: '$(PROD_RESOURCE_GROUP)'
    storage_account: '$(PROD_STORAGE_ACCOUNT)'

    react_app_url_fe_login: '$(PROD_REACT_APP_URL_FE_LOGIN)/login'
    react_app_url_fe_logout: '$(PROD_REACT_APP_URL_FE_LOGIN)/logout'
    react_app_url_fe_dashboard: '$(PROD_REACT_APP_URL_FE_DASHBOARD)'
    react_app_url_fe_landing: '$(PROD_REACT_APP_URL_FE_LANDING)'
    react_app_url_api_onboarding: '$(PROD_REACT_APP_URL_API_ONBOARDING)'
    react_app_url_api_party_process: '$(PROD_REACT_APP_URL_API_PARTY_PROCESS)'
    react_app_url_api_party_registry_proxy: '$(PROD_REACT_APP_URL_API_PARTY_REGISTRY_PROXY)'
    react_app_enable_assistance: 'false'

  # every branch different from past will be considered as DEV
  #  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release-dev') }}:
  ${{ else }}:
    environment: 'DEV'
    azure_subscription: $(DEV_AZURE_SUBSCRIPTION)
    cdn_endpoint: '$(DEV_CDN_ENDPOINT)'
    cdn_profile: '$(DEV_CDN_PROFILE)'
    resource_group: '$(DEV_RESOURCE_GROUP)'
    storage_account: '$(DEV_STORAGE_ACCOUNT)'

    react_app_url_fe_login: '$(DEV_REACT_APP_URL_FE_LOGIN)/login'
    react_app_url_fe_logout: '$(DEV_REACT_APP_URL_FE_LOGIN)/logout'
    react_app_url_fe_dashboard: '$(DEV_REACT_APP_URL_FE_DASHBOARD)'
    react_app_url_fe_landing: '$(DEV_REACT_APP_URL_FE_LANDING)'
    react_app_url_api_onboarding: '$(DEV_REACT_APP_URL_API_ONBOARDING)'
    react_app_url_api_party_process: '$(DEV_REACT_APP_URL_API_PARTY_PROCESS)'
    react_app_url_api_party_registry_proxy: '$(DEV_REACT_APP_URL_API_PARTY_REGISTRY_PROXY)'
    react_app_enable_assistance: 'true'

# Automatically triggered on PR
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#pr-trigger
trigger:
  branches:
    include:
      - main
      - release-*

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v18
      endpoint: 'io-azure-devops-github-ro'

pool:
  vmImage: '$(vmImageNameDefault)'

stages:
  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch $(DEFAULT_BRANCH)
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    condition: or(
      eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH)),
      and(
      startsWith(variables['Build.SourceBranch'], 'refs/tags'),
      endsWith(variables['Build.SourceBranch'], '-RELEASE')
      )
      )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        condition: eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH))
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
          - template: templates/node-github-release/template.yaml@pagopaCommons
            parameters:
              release_branch: '$(DEFAULT_BRANCH)'
              semver: '${{ parameters.RELEASE_SEMVER }}'
              gitEmail: '$(GIT_EMAIL)'
              gitUsername: '$(GIT_USERNAME)'
              gitHubConnection: '$(GITHUB_CONNECTION)'

      - job: skip_release
        condition: ne(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH))
        steps:
          - script: |
              echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
            displayName: 'Skip release bundle'

  # Prepare Artifact with application bundle
  - stage: Prepare_artifact
    condition: or(eq(variables['environment'], 'DEV'), succeeded())
    jobs:
      - job: 'make_build'
        steps:
          - template: ./azure-templates/setup-yarn-cache.yml
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              nodeVersion: $(NODE_VERSION)
          - bash: |
              yarn build
            displayName: 'Build files'
            env:
              INLINE_RUNTIME_CHUNK: 'false'
              REACT_APP_URL_FE_LOGIN: '$(react_app_url_fe_login)/login'
              REACT_APP_URL_FE_LOGOUT: '$(react_app_url_fe_login)/logout'
              REACT_APP_URL_FE_DASHBOARD: '$(react_app_url_fe_dashboard)'
              REACT_APP_URL_FE_LANDING: '$(react_app_url_fe_landing)'
              REACT_APP_URL_API_ONBOARDING: '$(react_app_url_api_onboarding)'
              REACT_APP_URL_API_PARTY_PROCESS: '$(react_app_url_api_party_process)'
              REACT_APP_URL_API_PARTY_REGISTRY_PROXY: '$(react_app_url_api_party_registry_proxy)'
              REACT_APP_ENABLE_ASSISTANCE: '$(react_app_enable_assistance)'
          - bash: |
              printf "$EXECUTION_ID\n$(git name-rev --name-only FETCH_HEAD) $(git rev-parse HEAD)" > $(System.DefaultWorkingDirectory)/build/build.info
            env:
              EXECUTION_ID: '$(Build.BuildNumber) - $(Build.DefinitionName)($(Build.BuildId))'
            displayName: 'Build info'
          - publish: $(System.DefaultWorkingDirectory)/build
            artifact: Bundle

  # Deploy bundle
  - stage: 'Deploy_to_${{ variables.environment }}'
    condition: or(eq(variables['environment'], 'DEV'), succeeded())
    jobs:
      - job: 'Deploy_to_${{ variables.environment }}'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle

          - task: AzureCLI@1
            displayName: 'Sync checkout storage'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob sync --container '$(blob_container_name)' --account-name $(storage_account) -s "$(Pipeline.Workspace)/Bundle" --destination '$(basePath)/'

          - task: AzureCLI@1
            displayName: 'Purge CDN endpoint'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: |
                az cdn endpoint purge -g $(resource_group) -n $(cdn_endpoint) --profile-name $(cdn_profile) --content-paths "/$(basePath)" "/$(basePath)/*"
